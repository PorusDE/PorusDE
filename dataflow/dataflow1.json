{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_movsrc",
						"type": "DatasetReference"
					},
					"name": "movisrc"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_movanatgt",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "movis1950"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "window1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          movie as string,",
				"          title as string,",
				"          genres as string,",
				"          year as string,",
				"          Rating as string,",
				"          {Rotton Tomato} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> movisrc",
				"movisrc select(mapColumn(",
				"          movie,",
				"          title,",
				"          genres,",
				"          year,",
				"          Rating,",
				"          {Rotten Tomato} = {Rotton Tomato}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 filter(toInteger(year)>1950) ~> movis1950",
				"movis1950 derive(PrimaryGenre = iif(locate('|',genres)>1,left(genres,locate('|',genres)-1),genres)) ~> derivedColumn1",
				"derivedColumn1 window(over(PrimaryGenre,",
				"          year),",
				"     desc({Rotten Tomato}, true),",
				"     Rank = rank()) ~> window1",
				"window1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          movie as string,",
				"          title as string,",
				"          genres as string,",
				"          year as string,",
				"          Rating as string,",
				"          {Rotton Tomato} as string",
				"     ),",
				"     partitionFileNames:['MovieAnalysis.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}